#pip install ultralytics
#pip install torch torchvision torchaudio
#pip install opencv-python
#pip install matplotlib





# Извлечение метрик
mAP_50 = metrics_train['metrics_train'][0]  # mAP@0.5
precision = metrics_train['metrics_train'][1]  # Precision
recall = metrics_train['metrics_train'][2]  # Recall
f1_score = metrics_train['metrics_train'][3]  # F1-score

print(f"mAP@0.5: {mAP_50}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-score: {f1_score}")


# Извлечение метрик
mAP_50 = metrics_test['metrics_test'][0]  # mAP@0.5
precision = metrics_test['metrics_test'][1]  # Precision
recall = metrics_test['metrics_test'][2]  # Recall
f1_score = metrics_test['metrics_test'][3]  # F1-score

print(f"mAP@0.5: {mAP_50}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-score: {f1_score}")


# Построение графика точности и потерь
history = model.history  # История обучения
fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# График точности
ax[0].plot(history['epochs'], history['metrics'], label='Precision')
ax[0].plot(history['epochs'], history['val_metrics'], label='Val Precision')
ax[0].set_title("Precision over Epochs")
ax[0].set_xlabel('Epochs')
ax[0].set_ylabel('Precision')
ax[0].legend()

# График потерь
ax[1].plot(history['epochs'], history['loss'], label='Training Loss')
ax[1].plot(history['epochs'], history['val_loss'], label='Validation Loss')
ax[1].set_title("Loss over Epochs")
ax[1].set_xlabel('Epochs')
ax[1].set_ylabel('Loss')
ax[1].legend()

plt.show()







# Прогнозирование на новых изображениях
results = model.predict(source="C:/path/to/your/test/images", imgsz=640)

# Печать результатов предсказаний
results.show()  # Показывает изображения с детекциями
results.save()  # Сохраняет результаты в папку
